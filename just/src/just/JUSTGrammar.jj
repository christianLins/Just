/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(JUST)

package just;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import just.semantic.Namelist;
import just.semantic.Symboltable;
import just.semantic.Symbol.*;
import just.semantic.*;
import just.codegen.*;
import just.codegen.structure.*;
import just.codegen.references.*;
import just.codegen.structure.writer.ClassWriter;
import just.codegen.structure.writer.XmlWriter;

public class JUST
{
  private static Namelist namelist;
  private static Symboltable symboltable;
  private static Codegen codegen;
  private static JustClass justClass;
  private static ClassWriter writer;
  
  public static void main(String args []) throws ParseException
  {
    FileInputStream fis = null;
    File file = new File("./just_sources/test1.just");
	try {
		fis = new FileInputStream(file);

	} catch (FileNotFoundException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}

	symboltable = Symboltable.getInstance();
	namelist = Namelist.getInstance();
	codegen = new Codegen();
	justClass = new JustClass();
	writer = new XmlWriter();
	
	JUST parser = new JUST(fis);
    
    
    //while (true)
    //{
      System.out.println("Reading from input...");
      System.out.println(file.getName());
      try
      {
        switch (JUST.one_line())
        {
          case 0 : 
	          System.out.println("OK.");
	          writer.write(justClass);
	          break;
          case 1 : 
	          System.out.println("Goodbye.");
	          break;
          default : 
          	break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        JUST.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        //break;
      }
    //}

     System.out.println(symboltable.toString());
  }
}

PARSER_END(JUST)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < EQUALS : "==" >
| < NQ : "!=" > /*Not Equals*/
| < GT : ">" > /*Greater than*/
| < GET : ">=" > /*Greater than or equal*/
| < LT : "<" > /*Lesser than*/
| < LET : "<=" > /*Lesser than or equal*/
| < NOT : "!" >
| < OR: "||" >
| < AND: "&&" >

}

TOKEN : /*punctuation character*/
{
  < LEFTBRACKET : "(" >
| < RIGHTBRACKET : ")" >
| < LEFTCURLYBRACKET: "{" >
| < RIGHTTCURLYBRACKET: "}" >
| < LEFTSQUAREBRACKET: "[" >
| < RIGHTSQUAREBRACKET: "]" >
| < COLON : "," >
| < SEMICOLON : ";">
}

TOKEN : /*keywords*/
{
  < PROGRAM : "program" >
| < VOID: "void" >
| < INT : "int" >
| < BOOL: "boolean" >
| < BYREF: "byref" >
| < RETURN: "return" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < TRUE: "true" >
| < FALSE: "false" >
}

TOKEN : { < NUMBER : (["0"-"9"])+ > }

TOKEN :
{
  < IDENT : (< NUMBER >|< WORD >)(< NUMBER >|< WORD >)* >
| < WORD : (["a"-"z", "A"-"Z"])+ >
}


int one_line() :
{}
{
  CompilationUnit() //";"/*Startpunkt für die Kompilierung*/
  {
    return 0;
  }

}

void CompilationUnit() :
{
	Symbol sy;
	Reference classRef;
}
{
 < PROGRAM >
 {
    }
 token = < IDENT >
 {
    sy = namelist.insert(token.image, Kind.progKind);
    symboltable.insert(sy);
    symboltable.enterScope("program " + token.image);
    
    classRef = justClass.addClassReference(sy);
 }
 < LEFTCURLYBRACKET > Definition()
 {	symboltable.leaveScope();
 }
 < RIGHTTCURLYBRACKET >
}

void Definition() :
{}
{
 (	LOOKAHEAD(3)/*vorrausschauen 3 ist vorschlag von cc*/
   VarDef() | FuncDef()
 )*
}

void VarDef() :
{
 Type type;
 Token token;
 Symbol sy;
}
{
type = type()
token=< IDENT >
{ sy = namelist.insert(token.image, Symbol.Kind.varKind);
 symboltable.insert(sy);
 Descriptor desc = codegen.newDescriptor(sy);
 codegen.load(desc);
}
[Init()]< SEMICOLON >
}

void TruthVal() :
{}
{
  < TRUE > | < FALSE >}

void Init() :
{}
{
  < ASSIGN > (< NUMBER > | TruthVal())
}

Type type() :
{
}
{
  (
    < VOID >
    {
      return Type.voidType;
    }
  | < INT >
    {
      return Type.intType;
    }
  | < BOOL >
    {
      return Type.boolType;
    }
  )
}


void FuncDef() :
{
  	
}
{
  FuncHead() Block()
  {	symboltable.leaveScope();
  }
}

void FuncHead() :
{
    Type type;
	Token token;
	Symbol sy;
}
{
  type = type()
  token=< IDENT >
  {	sy = namelist.insert(token.image, Kind.funcKind);
	symboltable.insert(sy);
	symboltable.enterScope(token.image);
  }
  < LEFTBRACKET >[FormParList()]< RIGHTBRACKET >
}

void FormParList() :
{
  Token token;
  Symbol sy;
}
{
    formPar()   ([< COLON >] formPar()   )*
}

void formPar() :/*musste aufgeteilt werden, sonst gabs fehler*/
{
  Type type;
  Token token;
  Symbol sy;
}
{
   [< BYREF >]
   type = type()
   token=< IDENT >
   {
    sy = namelist.insert(token.image, Kind.parKind);
    symboltable.insert(sy);
  }
}

void Block() :
{}
{
< LEFTCURLYBRACKET>( VarDef() | Stat() )*< RIGHTTCURLYBRACKET>
}

void Stat() :
{}
{ LOOKAHEAD(2)/*vorraussschauen (Vorschlag war 2)*/
AssignStat() | CallStat() | IfStat() |  WhileStat() | ReturnStat()| Block()| < SEMICOLON >
}

void AssignStat() :
{}
{
< IDENT >< ASSIGN >Expr()< SEMICOLON >
}

void CallStat() :
{}
{
Call()< SEMICOLON >
}

void Call():
{}
{
  < IDENT >  < LEFTBRACKET >[ActParList()]< RIGHTBRACKET >
}

void ActParList():
{}
{
  Expr()( < COLON >Expr())*
}

void IfStat() :
{}
{
< IF >< LEFTBRACKET >Expr()< RIGHTBRACKET >Stat()
[LOOKAHEAD(2) /*Vorrausschauen (Vorschlag war 2)*/
< ELSE >Stat()
]
}

void WhileStat() :
{}
{
< WHILE >< LEFTBRACKET >Expr()< RIGHTBRACKET >
{ symboltable.enterScope("while");
}
Stat()
{ symboltable.leaveScope();
}
}
void ReturnStat() :
{}
{
< RETURN >Expr()
{
  codegen.emit1(Opcode.IRETURN);}
< SEMICOLON >
}

void Expr() :
{}
{
  OrExpr()
}

void OrExpr() :
{}
{
  AndExpr()
  (< OR > AndExpr()
	  {		codegen.emit1(Opcode.IOR);
	  }
  )*
}

void AndExpr() :
{}
{
  RelExpr()(< AND >RelExpr()
	 {
		codegen.emit1(Opcode.IAND);
	 }
  )*
}

void RelExpr():
{}
{
  SimpleExpr()[(< EQUALS >|<  NQ >| < GT >|< GET >|< LT >|< LET > )SimpleExpr()]
}

void SimpleExpr() :
{}
{
  [< PLUS >
	 {
		codegen.emit1(Opcode.IADD);
	 }
  |< MINUS >
	 {
		codegen.emit1(Opcode.ISUB);
	 }
  ] Term() (< PLUS >
	 {
		codegen.emit1(Opcode.IADD);
	 }
  |< MINUS >
	 {
		codegen.emit1(Opcode.ISUB);
	 }
  Term())*
}

void Term():
{}
{
  NotFact() ((< MULTIPLY >
	 {
		codegen.emit1(Opcode.IMUL);
	 }
  |< DIVIDE >
	 {
		codegen.emit1(Opcode.IDIV);
	 }
  ) NotFact())*
}

void NotFact():
{}
{
  [< NOT >
	 {
		codegen.emit1(Opcode.INEG);
	 }
  ]Fact()
}

void Fact():
{}
{
  < NUMBER >|< IDENT >[< LEFTBRACKET >[ActParList()]< RIGHTBRACKET >]|< LEFTBRACKET >Expr()< RIGHTBRACKET >
}

