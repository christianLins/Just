/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(JUST)

package javacc;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;


public class JUST
{
  public static void main(String args []) throws ParseException
  {
    FileInputStream fis = null;
    File file = new File("./just_sources/test1.just");
	try {
		fis = new FileInputStream(file);

	} catch (FileNotFoundException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
    JUST parser = new JUST(fis);
    
    //while (true)
    //{
      System.out.println("Reading from input...");
      System.out.println(file.getName());
      try
      {
        switch (JUST.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        JUST.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        //break;
      }
    //}
  }
}

PARSER_END(JUST)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ASSIGN : "=" >
| < EQUALS : "==" >
| < NQ : "!=" > /*Not Equals*/
| < GT : ">" > /*Greater than*/
| < GET : ">=" > /*Greater than or equal*/
| < LT : "<" > /*Lesser than*/
| < LET : "<=" > /*Lesser than or equal*/
| < NOT : "!" >
| < OR: "||" >
| < AND: "&&" >

}

TOKEN : /*punctuation character*/
{
  < LEFTBRACKET : "(" >
| < RIGHTBRACKET : ")" >
| < LEFTCURLYBRACKET: "{" >
| < RIGHTTCURLYBRACKET: "}" >
| < LEFTSQUAREBRACKET: "[" >
| < RIGHTSQUAREBRACKET: "]" >
| < COLON : "," >
| < SEMICOLON : ";">
}

TOKEN : /*keywords*/
{
  < PROGRAM : "program" >
| < VOID: "void" >
| < INT : "int" >
| < BOOL: "boolean" >
| < BYREF: "byref" >
| < RETURN: "return" >
| < IF: "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < TRUE: "true" >
| < FALSE: "false" >
}

TOKEN : { < NUMBER : (["0"-"9"])+ > }

TOKEN :
{
  < IDENT : (< NUMBER >|< WORD >)(< NUMBER >|< WORD >)* >
| < WORD : (["a"-"z", "A"-"Z"])+ >
}


int one_line() :
{}
{
  CompilationUnit() //";"/*Startpunkt für die Kompilierung*/
  {
    return 0;
  }

}

void CompilationUnit() :
{}
{
 < PROGRAM > < IDENT > < LEFTCURLYBRACKET > Definition() < RIGHTTCURLYBRACKET >
}

void Definition() :
{}
{
 (	LOOKAHEAD(3)/*vorrausschauen 3 ist vorschlag von cc*/
   VarDef() | FuncDef()
 )*
}

void VarDef() :
{}
{
Type() < IDENT >[Init()]< SEMICOLON >
}

void TruthVal() :
{}
{
  < TRUE > | < FALSE >}

void Init() :
{}
{
  < ASSIGN > (< NUMBER > | TruthVal())
}

void Type() :
{}
{
  < VOID >|< INT >|< BOOL >
}

void FuncDef() :
{}
{
  FuncHead() Block()
}

void FuncHead() :
{}
{
  Type() < IDENT > < LEFTBRACKET >[FormParList()]< RIGHTBRACKET >
}

void FormParList() :
{}
{
    formPar()   ([< COLON >] formPar()   )*
}

void formPar() :/*musste aufgeteilt werden, sonst gabs fehler*/
{}
{
   [< BYREF >] Type() < IDENT >
}

void Block() :
{}
{
< LEFTCURLYBRACKET>( VarDef() | Stat() )*< RIGHTTCURLYBRACKET>
}

void Stat() :
{}
{ LOOKAHEAD(2)/*vorraussschauen (Vorschlag war 2)*/
AssignStat() | CallStat() | IfStat() |  WhileStat() | ReturnStat()| Block()| < SEMICOLON >
}

void AssignStat() :
{}
{
< IDENT >< ASSIGN >Expr()< SEMICOLON >
}

void CallStat() :
{}
{
Call()< SEMICOLON >
}

void Call():
{}
{
  < IDENT >  < LEFTBRACKET >[ActParList()]< RIGHTBRACKET >
}

void ActParList():
{}
{
  Expr()( < COLON >Expr())*
}

void IfStat() :
{}
{
< IF >< LEFTBRACKET >Expr()< RIGHTBRACKET >Stat()
[LOOKAHEAD(2) /*Vorrausschauen (Vorschlag war 2)*/
< ELSE >Stat()
]
}

void WhileStat() :
{}
{
< WHILE >< LEFTBRACKET >Expr()< RIGHTBRACKET > Stat()
}
void ReturnStat() :
{}
{
< RETURN >Expr()< SEMICOLON >
}

void Expr() :
{}
{
  OrExpr()
}

void OrExpr() :
{}
{
  AndExpr() (< OR > AndExpr())*
}

void AndExpr() :
{}
{
  RelExpr()(< AND >RelExpr())*
}

void RelExpr():
{}
{
  SimpleExpr()[(< EQUALS >|<  NQ >| < GT >|< GET >|< LT >|< LET > )SimpleExpr()]
}

void SimpleExpr() :
{}
{
  [< PLUS >|< MINUS >] Term() (< PLUS >|< MINUS > Term())*
}

void Term():
{}
{
  NotFact() ((< MULTIPLY >|< DIVIDE >) NotFact())*
}

void NotFact():
{}
{
  [< NOT >]Fact()
}

void Fact():
{}
{
  < NUMBER >|< IDENT >[< LEFTBRACKET >[ActParList()]< RIGHTBRACKET >]|< LEFTBRACKET >Expr()< RIGHTBRACKET >
}

